name: Rust

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  pre-check:
    name: Pre-Check licenses and security advisories
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@v1

  build-test-rust:
    needs: [ pre-check ]

    runs-on: ubuntu-latest

    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: Swatinem/rust-cache@v1
    - uses: actions/checkout@v3
    - name: Cargo (build)
      run: cargo build --release
    - name: Cargo (run tests)
      run: tests/scripts/cargo-test.sh
    - name: Upload Artifact (broker)
      uses: actions/upload-artifact@v3
      with:
        name: broker
        path: target/release/broker
    - name: Upload Artifact (proxy)
      uses: actions/upload-artifact@v3
      with:
        name: proxy
        path: target/release/proxy

  try-out-artifact:
    needs: [ build-test-rust ]

    runs-on: ubuntu-latest

    steps:
    - name: Download Previous Build Artifacts
      uses: actions/download-artifact@v2
      with:
        name: broker
    - run: find
    - run: bash -c find


  build-docker-broker:
    needs: [ build-test-rust ]
    # This workflow defines how a maven package is built, tested and published.
    # Visit: https://github.com/samply/github-workflows/blob/develop/.github/workflows/docker-ci.yml, for more information
    uses: samply/github-workflows/.github/workflows/docker-ci.yml@main
    with:
      # The Docker Hub Repository you want eventually push to, e.g samply/share-client
      image-name: "ghcr.io/samply/beam-broker"
      # Define special prefixes for docker tags. They will prefix each images tag.
      # image-tag-prefix: "foo"
      # Define the build context of your image, typically default '.' will be enough
      # build-context: '.'
      # Define the Dockerfile of your image, typically default './Dockerfile' will be enough
      build-file: './Dockerfile.broker.basedonprebuild'
      # NOTE: This doesn't work currently
      # A list of build arguments, passed to the docker build
      # build-args: |
      #   foo: bar
      # Define the target platforms of the docker build (default "linux/amd64,linux/arm64/v8")
      # build-platforms: "linux/amd64"
      # If your actions generate an artifact in a previous build step, you can tell this workflow to download it
      artifact-name: 'broker'
    # This passes the secrets from calling workflow to the called workflow
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  # NOTE: Repetition currently necessary. Reusable workflows are not runable with strategy matrix. See: https://stackoverflow.com/a/70173578, workaround could be later implemented: https://github.community/t/reusable-workflow-with-strategy-matrix/205676
  build-proxy:
    needs: [ build-test-rust ]
    # This workflow defines how a maven package is built, tested and published.
    # Visit: https://github.com/samply/github-workflows/blob/develop/.github/workflows/docker-ci.yml, for more information
    uses: samply/github-workflows/.github/workflows/docker-ci.yml@main
    with:
      # The Docker Hub Repository you want eventually push to, e.g samply/share-client
      image-name: "ghcr.io/samply/beam-proxy"
      # Define special prefixes for docker tags. They will prefix each images tag.
      # image-tag-prefix: "foo"
      # Define the build context of your image, typically default '.' will be enough
      # build-context: '.'
      # Define the Dockerfile of your image, typically default './Dockerfile' will be enough
      build-file: './Dockerfile.proxy.basedonprebuild'
      # NOTE: This doesn't work currently
      # A list of build arguments, passed to the docker build
      # build-args: |
      #   foo: bar
      # Define the target platforms of the docker build (default "linux/amd64,linux/arm64/v8")
      # build-platforms: "linux/amd64"
      # If your actions generate an artifact in a previous build step, you can tell this workflow to download it
      artifact-name: 'proxy'
    # This passes the secrets from calling workflow to the called workflow
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}