#!/bin/bash -e

SD=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SD

source example_json.sh

export PROXY1_ID=${PROXY1_ID:-proxy1.broker}
export PROXY2_ID=${PROXY2_ID:-proxy2.broker}
export PROXY1_ID_SHORT=$(echo $PROXY1_ID | cut -d '.' -f 1)
export PROXY2_ID_SHORT=$(echo $PROXY1_ID | cut -d '.' -f 1)
export BROKER_ID=$(echo $PROXY1_ID | cut -d '.' -f 2-)
export BROKER_URL="https://${BROKER_ID}"
export APP_ID_SHORT=app1
export APP_KEY=App1Secret

export VAULT_TOKEN=$(echo $RANDOM | md5sum | head -c 20; echo;)

export P1="http://localhost:8081" # for scripts
export P2="http://localhost:8082" # for scripts

function check_prereqs() {
     set +e
     if [[ "$(curl --version)" != *" libcurl/"* ]]; then
          echo "curl not found -- please install curl >= 7.7.0 and put into PATH."
          exit 1
     fi
     if [[ "$(jq --version)" != *"jq-"* ]]; then
          echo "jq not found -- please install and put into PATH."
          exit 1
     fi
     set -e
}

function build_rust() {
    BACK=$(pwd)
    cd $SD/../..
    BUILD=$(cargo build --message-format=json)
    BROKER=$(echo $BUILD |jq -r 'select(.target.name == "broker")' | jq -r .executable)
    PROXY=$(echo $BUILD |jq -r 'select(.target.name == "proxy")' | jq -r .executable)
    mkdir -p artifacts/binaries-amd64
    rsync $BROKER $PROXY artifacts/binaries-amd64/
    cd $BACK
}

function build_docker() {
    BACK=$(pwd)
    cd $SD
    docker-compose build --build-arg TARGETARCH=amd64
    cd $BACK
}

function clean() {
    docker-compose down
    rm -f pki/*.pem pki/*.json pki/pki.secret
}

function start {
    clean
    pki/pki devsetup
    echo "$VAULT_TOKEN" > ./pki/pki.secret
    docker-compose up --abort-on-container-exit
}

function start_bg {
    clean
    pki/pki devsetup
    echo "$VAULT_TOKEN" > ./pki/pki.secret
    docker-compose up -d
}

function stop {
    clean
}

function clean {
    pki/pki clean
}

COL_NONE='\033[0m'
COL_RED='\033[0;31m'
COL_GREEN='\033[0;32m'
COL_BLUE='\033[0;34m'

function testing {
    echo -e "${COL_BLUE}TEST \"$@\"${COL_NONE}"
}

function fail {
    JSON="$1"
    shift
    echo -e "${COL_RED}FAIL $@${COL_NONE}"
    echo -e "Failed Response: $JSON"
    (exit 1)
}

function success {
    echo -e "  ${COL_GREEN}OK${COL_NONE}"
}

function curl_get {
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID_SHORT.$PROXY1_ID $APP_KEY" -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

function curl_post {
    BODY_FILE=$(mktemp)
    JSON=$(curl -s -H "content-type: application/json" -H "Authorization: ApiKey $APP_ID_SHORT.$PROXY1_ID $APP_KEY" -d @- -w %{json} -o $BODY_FILE $@)
    BODY=$(cat $BODY_FILE | sed 's/\"/\\\"/g')
    JSON=$(echo "$JSON" | jq ". + {\"body\": \"${BODY}\" }")
    rm $BODY_FILE
    echo "$JSON"
}

export -f curl_get curl_post start stop clean testing fail success

check_prereqs

case "$1" in
  build)
    build
    ;;
  start)
    start
    ;;
  start_bg)
    start_bg
    ;;
  clean)
    clean
    ;;
  stop)
    clean
    ;;
  noop)
    ;;
  *)
    echo "Usage: $0 start|stop|clean"
    ;;
esac
